import {
  time,
  loadFixture,
} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import hre from "hardhat";

describe("Lock", function () {
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshot in every test.
  async function deployOneYearLockFixture() {

    // Contracts are deployed using the first signer/account by default
    const [owner, otherAccount] = await hre.ethers.getSigners();
    console.log("owner", owner.address);

    const DeflatePortal = await hre.ethers.getContractFactory("DeflatePortal");
    const deflatePortal = await DeflatePortal.deploy(
      "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
      "0xb0324286B3ef7dDdC93Fb2fF7c8B7B8a3524803c",
      ["0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913", "0x4e65fE4DbA92790696d040ac24Aa414708F5c0AB", "0xBdb9300b7CDE636d9cD4AFF00f6F009fFBBc8EE6", "0x99CBC45ea5bb7eF3a5BC08FB1B7E56bB2442Ef0D"]
    );

    return { deflatePortal, owner, otherAccount };
  }

  describe("Deployment", function () {
    it("Should set the right unlockTime", async function () {
      const { deflatePortal } = await loadFixture(deployOneYearLockFixture);

      expect(await deflatePortal.routerAddress()).to.equal("0xb0324286B3ef7dDdC93Fb2fF7c8B7B8a3524803c");
    });

  });

  describe("Check Data", function () {
    describe("Validations", function () {
      it("Check the Portal Data", async function () {
        const { deflatePortal } = await loadFixture(deployOneYearLockFixture);
        const dataValidation = await deflatePortal.validatePortalCalldata(
          "0xa2e42c6500000000000000000000000000000000000000000000000000000000000000400000000000000000000000008604700ae3c4ea791eb1019238ff07a46e41c77a000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000009896800000000000000000000000004e65fe4dba92790696d040ac24aa414708f5c0ab000000000000000000000000000000000000000000000000000000000097fa40000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000260000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000080ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000008604700ae3c4ea791eb1019238ff07a46e41c77a000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000a238dd80c259a72e81d7e4664a9801593f98d1c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000a238dd80c259a72e81d7e4664a9801593f98d1c5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000084617ba037000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        expect(dataValidation).to.equal(true);
      });
    });

  });
});
